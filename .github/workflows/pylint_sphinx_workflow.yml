name: Code Quality and Documentation

on: 
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  lint-and-docs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff sphinx sphinx-rtd-theme sphinx-autoapi

    - name: Get changed files
      id: changed-files
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git fetch origin "+refs/pull/${{ github.event.pull_request.number }}/merge:refs/remotes/origin/pr/${{ github.event.pull_request.number }}"
        git checkout refs/remotes/origin/pr/${{ github.event.pull_request.number }}
        
        # Ensure GH CLI is authenticated (optional, GH CLI might not be needed here)
        echo "" > modFiles.txt
        git diff --name-only origin/main...HEAD | grep ".py$" >> modFiles.txt || true
        echo "files=$(cat modFiles.txt | tr '\n' ' ')" >> $GITHUB_OUTPUT

    - name: Run Ruff linting
      if: steps.changed-files.outputs.files != ''
      run: |
        for file in $(cat modFiles.txt); do
          ruff check "$file" --config ./pyproject.toml || exit 1
        done

    - name: Build documentation
      if: steps.changed-files.outputs.files != ''
      run: |
        if [ ! -d "docs" ]; then
          echo "No docs/ folder found. Initializing with Sphinx..."
          mkdir docs
          sphinx-quickstart docs -q -p "${{ github.repository }}" -a "GitHub Actions" --sep --makefile --ext-autodoc --ext-viewcode --ext-githubpages --no-batchfile
          # Optional: autoapi settings
          echo "
    extensions += ['autoapi.extension']
    autoapi_type = 'python'
    autoapi_dirs = ['.']
    html_theme = 'sphinx_rtd_theme'
    " >> docs/source/conf.py
        fi
    
        make -C docs clean
        make -C docs html

    - name: Deploy documentation
      env:
        DOCS_REPO: "AaravAgarwal/doc_test_3"
        DOCS_TOKEN: ${{ secrets.DOCPUSHING }}
      run: |
        git config --global user.email "aarav3@illinois.edu"
        git config --global user.name "GitHub Actions"

        git clone "https://x-access-token:${DOCS_TOKEN}@github.com/${DOCS_REPO}.git" external-docs
        REPO_NAME=$(basename "$GITHUB_REPOSITORY")
        TARGET_DIR="external-docs/${REPO_NAME}-docs"
        mkdir -p "$TARGET_DIR"

        cp -R docs/build/html/* "$TARGET_DIR/"

        cd external-docs
        git add .
        git commit -m "Docs update: ${GITHUB_SHA}" || echo "No changes to commit"
        git push origin main
